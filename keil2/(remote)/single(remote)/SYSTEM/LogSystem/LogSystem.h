#ifndef _LOGSYSTEM_H
#define _LOGSYSTEM_H

#include "stm32f4xx.h"

/*
    日志系统说明：
        使用无符号数32位 每一位代表一个错误事件
        0 无错误
        1 有错误

    具体错误类型见ERROR_TYPE 
    0b00000000 00000000 0000 0000 0000 0001 0x00000001 灰度通道选择错误
    0b00000000 00000000 0000 0000 0000 0010 0x00000002 电机速度超出设置限幅       会自动清除
    0b00000000 00000000 0000 0000 0000 0100 0x00000004 正在等待OpenMV返回数据     会自动清除
    0b00000000 00000000 0000 0000 0000 1000 0x00000008 MPU6050数据包错误          会自动清除
    0b00000000 00000000 0000 0000 0001 0000 0x00000010 停车时目标参数为外界修改     会自动清除
    0b00000000 00000000 0000 0000 0010 0000 0x00000020 24V电压异常                 
    0b00000000 00000000 0000 0000 0100 0000 0x00000040 5V_L1电压异常
    0b00000000 00000000 0000 0000 1000 0000 0x00000080 5V_L2电压异常
    0b00000000 00000000 0000 0001 0000 0000 0x00000100 5V_L3电压异常
    0b00000000 00000000 0000 0010 0000 0000 0x00000200 5V_H电压异常
    0b00000000 00000000 0000 0100 0000 0000 0x00000400 3V3_1电压异常
    0b00000000 00000000 0000 1000 0000 0000 0x00000800 3V3_2电压异常
    0b00000000 00000000 0001 0000 0000 0000 0x00001000 3V3_3电压异常
    0b00000000 00000000 0010 0000 0000 0000 0x00002000 Motor_V异常
    0b00000000 00000000 0100 0000 0000 0000 0x00004000 Motor_I异常
    0b00000000 00000000 1000 0000 0000 0000 0x00008000 上下板通信异常
    0b00000000 00000001 0000 0000 0000 0000 0x00010000 灰度灯光异常
    0b00000000 00000010 0000 0000 0000 0000 0x00020000 辅助MPU6050数据包错误

    用法：
        1. 在需要记录错误的地方调用LogWrite(错误类型)
        2. 在需要清除错误的地方调用LogClear(错误类型)
        3. 在需要读取错误的地方调用LogRead()

*/

typedef enum
{
    ERROR_GRAY_CHANNAL = 0x00000001,
    ERROR_MOTOR_SPEED = 0x00000002,
    ERROR_OPENMV_WAIT = 0x00000004,
    ERROR_MPU6050_PACK = 0x00000008,
    ERROR_SPEED_STOP = 0x00000010,
    ERROR_24V = 0x00000020,
    ERROR_5V_L1 = 0x00000040,
    ERROR_5V_L2 = 0x00000080,
    ERROR_5V_L3 = 0x00000100,
    ERROR_5V_H = 0x00000200,
    ERROR_3V3_1 = 0x00000400,
    ERROR_3V3_2 = 0x00000800,
    ERROR_3V3_3 = 0x00001000,
    ERROR_MOTOR_V = 0x00002000,
    ERROR_MOTOR_I = 0x00004000,
    ERROR_BOARD_COMM = 0x00008000,
    ERROR_GRAY_LIGHT = 0x00010000,
    ERROR_AUX_MPU6050_PACK = 0x00020000

}ERROR_TYPE;

extern uint32_t LogHis[5];//记录历史错误 仅记录最近5次错误
extern uint8_t LogHisIndex;//记录历史错误索引

uint32_t LogRead(void);
void LogWrite(ERROR_TYPE ErrorType);
void LogClear(ERROR_TYPE ErrorType);

//////////////////通用函数名定义/////////////////////

//用于定义会阻塞主函数的函数类型
typedef uint8_t PausesType;

#endif
